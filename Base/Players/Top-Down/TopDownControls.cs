//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Packages/com.n04h.techartlibrary/Base/Players/Top-Down/TopDownControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TopDownControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TopDownControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TopDownControls"",
    ""maps"": [
        {
            ""name"": ""TopDownActionMap"",
            ""id"": ""ad5492f3-8439-44a8-8ee9-41691c9ab66c"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""04e74356-1e26-4a86-9eeb-3d78e0bc2f51"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""d62d328b-3bce-49e6-83bd-6ffe0df43010"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""421019d2-db7c-496e-965d-195def4d6c66"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""aaba9300-5351-4a35-b40c-fed2db7ad4ea"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Front/Back"",
                    ""type"": ""Value"",
                    ""id"": ""e251d93f-2f4f-4495-bfbe-dd07c73aedc6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sideways"",
                    ""type"": ""Value"",
                    ""id"": ""aaec1c49-dcde-44fe-a822-d55d04d273e3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""16fe58d6-9c5a-47d0-9523-63cd6003c135"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""c5b6ddab-c68f-4250-be48-a1c0389ccee3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseDrag"",
                    ""type"": ""Value"",
                    ""id"": ""11a92a84-813e-4c00-9597-8ccbbfb8ec94"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d1951aa4-1b81-413f-b246-a7db660d80e1"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ba30651-0e48-4de5-82a7-d9f660df4042"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""042bb664-9b06-49bb-9359-2f9e16cc2fd2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""45dda3e7-b1e0-4e8a-8da5-962205ae8a77"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc7e4f64-3e55-4505-80d5-99593b10740e"",
                    ""path"": ""<Joystick>/stick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Front/Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d5dc517a-812b-4374-8f9c-dd32331b91d4"",
                    ""path"": ""<Joystick>/stick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sideways"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e4d11cef-9497-4070-882a-d08c597d7c5e"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5083dd48-f4b3-4f88-bc83-08df2125d6fb"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90ba7334-bebc-406d-929a-2dcc7755510f"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseDrag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TopDownActionMap
        m_TopDownActionMap = asset.FindActionMap("TopDownActionMap", throwIfNotFound: true);
        m_TopDownActionMap_Up = m_TopDownActionMap.FindAction("Up", throwIfNotFound: true);
        m_TopDownActionMap_Down = m_TopDownActionMap.FindAction("Down", throwIfNotFound: true);
        m_TopDownActionMap_Right = m_TopDownActionMap.FindAction("Right", throwIfNotFound: true);
        m_TopDownActionMap_Left = m_TopDownActionMap.FindAction("Left", throwIfNotFound: true);
        m_TopDownActionMap_FrontBack = m_TopDownActionMap.FindAction("Front/Back", throwIfNotFound: true);
        m_TopDownActionMap_Sideways = m_TopDownActionMap.FindAction("Sideways", throwIfNotFound: true);
        m_TopDownActionMap_Look = m_TopDownActionMap.FindAction("Look", throwIfNotFound: true);
        m_TopDownActionMap_Interact = m_TopDownActionMap.FindAction("Interact", throwIfNotFound: true);
        m_TopDownActionMap_MouseDrag = m_TopDownActionMap.FindAction("MouseDrag", throwIfNotFound: true);
    }

    ~@TopDownControls()
    {
        UnityEngine.Debug.Assert(!m_TopDownActionMap.enabled, "This will cause a leak and performance issues, TopDownControls.TopDownActionMap.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TopDownActionMap
    private readonly InputActionMap m_TopDownActionMap;
    private List<ITopDownActionMapActions> m_TopDownActionMapActionsCallbackInterfaces = new List<ITopDownActionMapActions>();
    private readonly InputAction m_TopDownActionMap_Up;
    private readonly InputAction m_TopDownActionMap_Down;
    private readonly InputAction m_TopDownActionMap_Right;
    private readonly InputAction m_TopDownActionMap_Left;
    private readonly InputAction m_TopDownActionMap_FrontBack;
    private readonly InputAction m_TopDownActionMap_Sideways;
    private readonly InputAction m_TopDownActionMap_Look;
    private readonly InputAction m_TopDownActionMap_Interact;
    private readonly InputAction m_TopDownActionMap_MouseDrag;
    public struct TopDownActionMapActions
    {
        private @TopDownControls m_Wrapper;
        public TopDownActionMapActions(@TopDownControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_TopDownActionMap_Up;
        public InputAction @Down => m_Wrapper.m_TopDownActionMap_Down;
        public InputAction @Right => m_Wrapper.m_TopDownActionMap_Right;
        public InputAction @Left => m_Wrapper.m_TopDownActionMap_Left;
        public InputAction @FrontBack => m_Wrapper.m_TopDownActionMap_FrontBack;
        public InputAction @Sideways => m_Wrapper.m_TopDownActionMap_Sideways;
        public InputAction @Look => m_Wrapper.m_TopDownActionMap_Look;
        public InputAction @Interact => m_Wrapper.m_TopDownActionMap_Interact;
        public InputAction @MouseDrag => m_Wrapper.m_TopDownActionMap_MouseDrag;
        public InputActionMap Get() { return m_Wrapper.m_TopDownActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TopDownActionMapActions set) { return set.Get(); }
        public void AddCallbacks(ITopDownActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_TopDownActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TopDownActionMapActionsCallbackInterfaces.Add(instance);
            @Up.started += instance.OnUp;
            @Up.performed += instance.OnUp;
            @Up.canceled += instance.OnUp;
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @FrontBack.started += instance.OnFrontBack;
            @FrontBack.performed += instance.OnFrontBack;
            @FrontBack.canceled += instance.OnFrontBack;
            @Sideways.started += instance.OnSideways;
            @Sideways.performed += instance.OnSideways;
            @Sideways.canceled += instance.OnSideways;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @MouseDrag.started += instance.OnMouseDrag;
            @MouseDrag.performed += instance.OnMouseDrag;
            @MouseDrag.canceled += instance.OnMouseDrag;
        }

        private void UnregisterCallbacks(ITopDownActionMapActions instance)
        {
            @Up.started -= instance.OnUp;
            @Up.performed -= instance.OnUp;
            @Up.canceled -= instance.OnUp;
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @FrontBack.started -= instance.OnFrontBack;
            @FrontBack.performed -= instance.OnFrontBack;
            @FrontBack.canceled -= instance.OnFrontBack;
            @Sideways.started -= instance.OnSideways;
            @Sideways.performed -= instance.OnSideways;
            @Sideways.canceled -= instance.OnSideways;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @MouseDrag.started -= instance.OnMouseDrag;
            @MouseDrag.performed -= instance.OnMouseDrag;
            @MouseDrag.canceled -= instance.OnMouseDrag;
        }

        public void RemoveCallbacks(ITopDownActionMapActions instance)
        {
            if (m_Wrapper.m_TopDownActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITopDownActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_TopDownActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TopDownActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TopDownActionMapActions @TopDownActionMap => new TopDownActionMapActions(this);
    public interface ITopDownActionMapActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnFrontBack(InputAction.CallbackContext context);
        void OnSideways(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnMouseDrag(InputAction.CallbackContext context);
    }
}
