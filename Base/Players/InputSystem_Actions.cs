//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Packages/com.n04h.techartlibrary/Base/Players/InputSystem_Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem_Actions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem_Actions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem_Actions"",
    ""maps"": [
        {
            ""name"": ""FirstPerson_Player"",
            ""id"": ""55d48aba-8fc1-4bc2-975c-c6b0d4c7c1d9"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""51f30810-f832-46ed-9b12-42f310a880c1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""9623655a-0722-420a-9dd1-23985d1684bd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""cf49c3ea-ba71-46f5-a848-784788c4c9a1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""86c3f826-4caf-4af9-80b7-926abde26ad1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3b81454e-3863-4fa7-9139-4d8b288ef0b9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd29ea90-b3fe-4caf-8eee-772046d5f780"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8975d99b-c9db-4a06-a242-3e009887c1b8"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7fb21a9b-a6d5-4d10-95d7-2fdd3fb707f1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";QwertyKeyboard;AzertyKeyboard"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b0fdd20e-7b22-4951-9a12-36f10804cb88"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""19da1c33-d640-4267-91c1-a0ae7936f9a9"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d25a03ca-c70b-496e-b00b-bf7351d129d2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""52f63bcd-5b56-48ca-bc80-80045e792549"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";AzertyKeyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5f175acb-5c7e-486d-ada8-d806f1f83621"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";QwertyKeyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""02a7e35c-1cc8-4aea-8073-72064baba91e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""415d5d4d-c5fa-4575-bf58-f61843efbee7"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";AzertyKeyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""541fc7d1-aa84-4d4b-a4ba-f8ff28c0f4d3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";QwertyKeyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""46825b56-6283-4fcf-b9a5-cfe839638072"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""ThirdPerson_Player"",
            ""id"": ""bdb0dc3c-d987-4e8d-b6e8-520f30d6dc76"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""3d1cae9f-1470-4a8d-a26e-bbce325f39a9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""88425c7f-02be-4a5c-ae4e-d2e393cea00e"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Orbit_Player"",
            ""id"": ""d87ae2fd-df18-4c12-a901-ffd5ccca94cb"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""4ce15e7a-8c39-48e1-8e7e-b91ce1eb1eef"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Delta"",
                    ""type"": ""Value"",
                    ""id"": ""d20f261e-dba6-4f3e-bbca-efc5105681c5"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ScrollWheel"",
                    ""type"": ""Value"",
                    ""id"": ""59f3d34a-1a52-4105-8548-9980f50cf96c"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftButton"",
                    ""type"": ""Button"",
                    ""id"": ""060b7718-324c-4344-a538-3b8b22eeb3c4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightButton"",
                    ""type"": ""Button"",
                    ""id"": ""bfdac060-e897-42ef-9b36-c751ae0e4edb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b3d59cbf-172d-471e-a557-299a88075334"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f44dc678-1ba9-4436-a63b-28f50698374f"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""260cff3f-5da4-46ff-95a1-6f0a483cb565"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScrollWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""00647d31-8e83-4048-a17c-911d0b844196"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5792b69-1a0d-40a8-b7bf-cdda3af370a6"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Helicopter_Player"",
            ""id"": ""9aa0384a-291e-4e06-ac47-91f613bd5742"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""61dece34-18a2-4fe1-a798-2f41b4c26787"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""52e5a5fc-4b06-46fa-9587-68774302f16b"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Car_Player"",
            ""id"": ""41e84a13-ca09-4deb-a61a-c9ec66bf832b"",
            ""actions"": [
                {
                    ""name"": ""Forward"",
                    ""type"": ""Button"",
                    ""id"": ""60963ad1-304d-4cff-a39f-9c10f6628cc7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Backward"",
                    ""type"": ""Button"",
                    ""id"": ""9131eff6-491b-4bf8-b51f-2bbed86cd720"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""66eebd59-9646-477f-a559-5c8aca200d2a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""743b8df6-5dcc-4cc5-beb1-14583d4f0696"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Front/back"",
                    ""type"": ""Value"",
                    ""id"": ""66adbf34-6d16-456f-94f9-dcac57031c47"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Left/Right"",
                    ""type"": ""Value"",
                    ""id"": ""46f2a835-04ac-455f-b479-9b0e274317b4"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Handbrake"",
                    ""type"": ""Button"",
                    ""id"": ""b2b99cc0-355d-49c3-9ec4-ae49582faa5c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""153fe80f-e499-45bf-949a-c2af8a932eb8"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""a50f7e44-7d16-4ed1-83fb-ddf212fee610"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FullThrottle"",
                    ""type"": ""Button"",
                    ""id"": ""2b9e8fe6-ed05-493c-9867-21d13f9c12a6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""772f6f4a-8762-4295-9fd4-634e564bf2d8"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";AzertyKeyboard"",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6cdf2a37-45d2-4593-a5b0-e38d28ff9136"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";QwertyKeyboard"",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d892c111-a883-4cfe-84ec-b48b7704b91d"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ab24742-95ee-4fa2-8fff-ebd7101f4699"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Backward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77a53e58-edd1-4199-9ed7-68c303b1db54"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f52963f-9837-4c14-9eb8-38d491a24c3c"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";AzertyKeyboard"",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""db0fcf94-5bf9-43d4-a4f4-353c58c60e7c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";QwertyKeyboard"",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c186e84-572f-425f-8c9e-4f1ff904fe6f"",
                    ""path"": ""<Joystick>/stick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Front/back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""375ab50c-01c3-4f6c-b9a7-808ad19001e4"",
                    ""path"": ""<Joystick>/stick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left/Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""636b986d-a74f-46b0-9455-568717111d84"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Handbrake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""06a34e79-7ae9-4257-8a02-007d92bd3efa"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Handbrake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab1e5da8-0144-4501-a762-990c4e9e599d"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b255c6f-5646-4cbd-b9a8-0d5280b88f7a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2436da26-b075-4064-be21-4a2e90995ef3"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FullThrottle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TopDown_Player"",
            ""id"": ""a5c6d70a-7311-4936-8876-28e2facf054e"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""3afde817-926f-404f-8bc4-cb3b332fa780"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""2297acdf-d960-49a5-b40b-2992eb984f3a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""21d78ce5-0251-45d1-9173-a7f7c1b0730d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""f0904842-40d8-444b-8843-b2b87f7095c8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Front/Back"",
                    ""type"": ""Value"",
                    ""id"": ""4a1720d0-655d-47e5-985a-967ac85191d1"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Left/Right"",
                    ""type"": ""Value"",
                    ""id"": ""b3fcbc25-7e5d-497d-81c5-699b3d3c5b92"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""453af8c0-d867-436b-a01c-ddeb5d3d6333"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""9ad4cfdd-f445-411e-98dc-eb80e2f65546"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseDrag"",
                    ""type"": ""Value"",
                    ""id"": ""d299c593-bef1-42d1-95df-94f1b1c167ed"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""e8662dd7-cc41-48f6-8ae3-9d6f57770b24"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""03173272-2de0-4e88-b72b-d15317dfdda6"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";AzertyKeyboard"",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""28e32c8f-6459-4a15-b7ba-ca86dc061b4d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";QwertyKeyboard"",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""29331426-8933-4611-9bbe-654a017569cf"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1cf9047-9291-44d7-b830-9a92c4527e17"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""64e86166-5b3b-46a6-97c8-a4215ecac6e0"",
                    ""path"": ""<Joystick>/stick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Front/Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""edd7f2b7-36ce-48f2-bdb0-c2ecb71a5eb3"",
                    ""path"": ""<Joystick>/stick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left/Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7493ce07-5952-42b7-a5e2-3b55bf0be49d"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d4d97b5e-82c3-4208-9e98-b51339fa4afd"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91097f0a-bdf2-48ad-8a48-78dc56b72221"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseDrag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33c9067a-30f8-4513-a375-53f4d3eac2f6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""723c7179-dc2c-488d-8dd6-ab3e050dce3e"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""ad6104c2-e63c-448a-912e-972ce540cafe"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""08125181-b8da-4b26-8045-4710c9ef1e7b"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";AzertyKeyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""38520f85-01c5-4e09-a6f3-59470a1e0924"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";QwertyKeyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""04ba4321-dee9-4a28-99c9-332c5abb3d2c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cabc579a-e884-4c21-bd24-57e8606d2eaa"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f88f86c7-3ae3-4080-85bd-cde2ace89721"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";QwertyKeyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""14d0fefa-bdb0-4e88-869f-c32130d2c6f6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""AzertyKeyboard"",
            ""bindingGroup"": ""AzertyKeyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""QwertyKeyboard"",
            ""bindingGroup"": ""QwertyKeyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // FirstPerson_Player
        m_FirstPerson_Player = asset.FindActionMap("FirstPerson_Player", throwIfNotFound: true);
        m_FirstPerson_Player_Jump = m_FirstPerson_Player.FindAction("Jump", throwIfNotFound: true);
        m_FirstPerson_Player_Look = m_FirstPerson_Player.FindAction("Look", throwIfNotFound: true);
        m_FirstPerson_Player_Interact = m_FirstPerson_Player.FindAction("Interact", throwIfNotFound: true);
        m_FirstPerson_Player_Move = m_FirstPerson_Player.FindAction("Move", throwIfNotFound: true);
        // ThirdPerson_Player
        m_ThirdPerson_Player = asset.FindActionMap("ThirdPerson_Player", throwIfNotFound: true);
        m_ThirdPerson_Player_Newaction = m_ThirdPerson_Player.FindAction("New action", throwIfNotFound: true);
        // Orbit_Player
        m_Orbit_Player = asset.FindActionMap("Orbit_Player", throwIfNotFound: true);
        m_Orbit_Player_Position = m_Orbit_Player.FindAction("Position", throwIfNotFound: true);
        m_Orbit_Player_Delta = m_Orbit_Player.FindAction("Delta", throwIfNotFound: true);
        m_Orbit_Player_ScrollWheel = m_Orbit_Player.FindAction("ScrollWheel", throwIfNotFound: true);
        m_Orbit_Player_LeftButton = m_Orbit_Player.FindAction("LeftButton", throwIfNotFound: true);
        m_Orbit_Player_RightButton = m_Orbit_Player.FindAction("RightButton", throwIfNotFound: true);
        // Helicopter_Player
        m_Helicopter_Player = asset.FindActionMap("Helicopter_Player", throwIfNotFound: true);
        m_Helicopter_Player_Newaction = m_Helicopter_Player.FindAction("New action", throwIfNotFound: true);
        // Car_Player
        m_Car_Player = asset.FindActionMap("Car_Player", throwIfNotFound: true);
        m_Car_Player_Forward = m_Car_Player.FindAction("Forward", throwIfNotFound: true);
        m_Car_Player_Backward = m_Car_Player.FindAction("Backward", throwIfNotFound: true);
        m_Car_Player_Right = m_Car_Player.FindAction("Right", throwIfNotFound: true);
        m_Car_Player_Left = m_Car_Player.FindAction("Left", throwIfNotFound: true);
        m_Car_Player_Frontback = m_Car_Player.FindAction("Front/back", throwIfNotFound: true);
        m_Car_Player_LeftRight = m_Car_Player.FindAction("Left/Right", throwIfNotFound: true);
        m_Car_Player_Handbrake = m_Car_Player.FindAction("Handbrake", throwIfNotFound: true);
        m_Car_Player_Look = m_Car_Player.FindAction("Look", throwIfNotFound: true);
        m_Car_Player_Interact = m_Car_Player.FindAction("Interact", throwIfNotFound: true);
        m_Car_Player_FullThrottle = m_Car_Player.FindAction("FullThrottle", throwIfNotFound: true);
        // TopDown_Player
        m_TopDown_Player = asset.FindActionMap("TopDown_Player", throwIfNotFound: true);
        m_TopDown_Player_Up = m_TopDown_Player.FindAction("Up", throwIfNotFound: true);
        m_TopDown_Player_Down = m_TopDown_Player.FindAction("Down", throwIfNotFound: true);
        m_TopDown_Player_Right = m_TopDown_Player.FindAction("Right", throwIfNotFound: true);
        m_TopDown_Player_Left = m_TopDown_Player.FindAction("Left", throwIfNotFound: true);
        m_TopDown_Player_FrontBack = m_TopDown_Player.FindAction("Front/Back", throwIfNotFound: true);
        m_TopDown_Player_LeftRight = m_TopDown_Player.FindAction("Left/Right", throwIfNotFound: true);
        m_TopDown_Player_Look = m_TopDown_Player.FindAction("Look", throwIfNotFound: true);
        m_TopDown_Player_Interact = m_TopDown_Player.FindAction("Interact", throwIfNotFound: true);
        m_TopDown_Player_MouseDrag = m_TopDown_Player.FindAction("MouseDrag", throwIfNotFound: true);
        m_TopDown_Player_Move = m_TopDown_Player.FindAction("Move", throwIfNotFound: true);
    }

    ~@InputSystem_Actions()
    {
        UnityEngine.Debug.Assert(!m_FirstPerson_Player.enabled, "This will cause a leak and performance issues, InputSystem_Actions.FirstPerson_Player.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_ThirdPerson_Player.enabled, "This will cause a leak and performance issues, InputSystem_Actions.ThirdPerson_Player.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Orbit_Player.enabled, "This will cause a leak and performance issues, InputSystem_Actions.Orbit_Player.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Helicopter_Player.enabled, "This will cause a leak and performance issues, InputSystem_Actions.Helicopter_Player.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Car_Player.enabled, "This will cause a leak and performance issues, InputSystem_Actions.Car_Player.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_TopDown_Player.enabled, "This will cause a leak and performance issues, InputSystem_Actions.TopDown_Player.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FirstPerson_Player
    private readonly InputActionMap m_FirstPerson_Player;
    private List<IFirstPerson_PlayerActions> m_FirstPerson_PlayerActionsCallbackInterfaces = new List<IFirstPerson_PlayerActions>();
    private readonly InputAction m_FirstPerson_Player_Jump;
    private readonly InputAction m_FirstPerson_Player_Look;
    private readonly InputAction m_FirstPerson_Player_Interact;
    private readonly InputAction m_FirstPerson_Player_Move;
    public struct FirstPerson_PlayerActions
    {
        private @InputSystem_Actions m_Wrapper;
        public FirstPerson_PlayerActions(@InputSystem_Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_FirstPerson_Player_Jump;
        public InputAction @Look => m_Wrapper.m_FirstPerson_Player_Look;
        public InputAction @Interact => m_Wrapper.m_FirstPerson_Player_Interact;
        public InputAction @Move => m_Wrapper.m_FirstPerson_Player_Move;
        public InputActionMap Get() { return m_Wrapper.m_FirstPerson_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FirstPerson_PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IFirstPerson_PlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_FirstPerson_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FirstPerson_PlayerActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IFirstPerson_PlayerActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IFirstPerson_PlayerActions instance)
        {
            if (m_Wrapper.m_FirstPerson_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFirstPerson_PlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_FirstPerson_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FirstPerson_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FirstPerson_PlayerActions @FirstPerson_Player => new FirstPerson_PlayerActions(this);

    // ThirdPerson_Player
    private readonly InputActionMap m_ThirdPerson_Player;
    private List<IThirdPerson_PlayerActions> m_ThirdPerson_PlayerActionsCallbackInterfaces = new List<IThirdPerson_PlayerActions>();
    private readonly InputAction m_ThirdPerson_Player_Newaction;
    public struct ThirdPerson_PlayerActions
    {
        private @InputSystem_Actions m_Wrapper;
        public ThirdPerson_PlayerActions(@InputSystem_Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_ThirdPerson_Player_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_ThirdPerson_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ThirdPerson_PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IThirdPerson_PlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_ThirdPerson_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ThirdPerson_PlayerActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IThirdPerson_PlayerActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IThirdPerson_PlayerActions instance)
        {
            if (m_Wrapper.m_ThirdPerson_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IThirdPerson_PlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_ThirdPerson_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ThirdPerson_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ThirdPerson_PlayerActions @ThirdPerson_Player => new ThirdPerson_PlayerActions(this);

    // Orbit_Player
    private readonly InputActionMap m_Orbit_Player;
    private List<IOrbit_PlayerActions> m_Orbit_PlayerActionsCallbackInterfaces = new List<IOrbit_PlayerActions>();
    private readonly InputAction m_Orbit_Player_Position;
    private readonly InputAction m_Orbit_Player_Delta;
    private readonly InputAction m_Orbit_Player_ScrollWheel;
    private readonly InputAction m_Orbit_Player_LeftButton;
    private readonly InputAction m_Orbit_Player_RightButton;
    public struct Orbit_PlayerActions
    {
        private @InputSystem_Actions m_Wrapper;
        public Orbit_PlayerActions(@InputSystem_Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_Orbit_Player_Position;
        public InputAction @Delta => m_Wrapper.m_Orbit_Player_Delta;
        public InputAction @ScrollWheel => m_Wrapper.m_Orbit_Player_ScrollWheel;
        public InputAction @LeftButton => m_Wrapper.m_Orbit_Player_LeftButton;
        public InputAction @RightButton => m_Wrapper.m_Orbit_Player_RightButton;
        public InputActionMap Get() { return m_Wrapper.m_Orbit_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Orbit_PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IOrbit_PlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_Orbit_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Orbit_PlayerActionsCallbackInterfaces.Add(instance);
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
            @Delta.started += instance.OnDelta;
            @Delta.performed += instance.OnDelta;
            @Delta.canceled += instance.OnDelta;
            @ScrollWheel.started += instance.OnScrollWheel;
            @ScrollWheel.performed += instance.OnScrollWheel;
            @ScrollWheel.canceled += instance.OnScrollWheel;
            @LeftButton.started += instance.OnLeftButton;
            @LeftButton.performed += instance.OnLeftButton;
            @LeftButton.canceled += instance.OnLeftButton;
            @RightButton.started += instance.OnRightButton;
            @RightButton.performed += instance.OnRightButton;
            @RightButton.canceled += instance.OnRightButton;
        }

        private void UnregisterCallbacks(IOrbit_PlayerActions instance)
        {
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
            @Delta.started -= instance.OnDelta;
            @Delta.performed -= instance.OnDelta;
            @Delta.canceled -= instance.OnDelta;
            @ScrollWheel.started -= instance.OnScrollWheel;
            @ScrollWheel.performed -= instance.OnScrollWheel;
            @ScrollWheel.canceled -= instance.OnScrollWheel;
            @LeftButton.started -= instance.OnLeftButton;
            @LeftButton.performed -= instance.OnLeftButton;
            @LeftButton.canceled -= instance.OnLeftButton;
            @RightButton.started -= instance.OnRightButton;
            @RightButton.performed -= instance.OnRightButton;
            @RightButton.canceled -= instance.OnRightButton;
        }

        public void RemoveCallbacks(IOrbit_PlayerActions instance)
        {
            if (m_Wrapper.m_Orbit_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOrbit_PlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_Orbit_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Orbit_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Orbit_PlayerActions @Orbit_Player => new Orbit_PlayerActions(this);

    // Helicopter_Player
    private readonly InputActionMap m_Helicopter_Player;
    private List<IHelicopter_PlayerActions> m_Helicopter_PlayerActionsCallbackInterfaces = new List<IHelicopter_PlayerActions>();
    private readonly InputAction m_Helicopter_Player_Newaction;
    public struct Helicopter_PlayerActions
    {
        private @InputSystem_Actions m_Wrapper;
        public Helicopter_PlayerActions(@InputSystem_Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Helicopter_Player_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Helicopter_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Helicopter_PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IHelicopter_PlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_Helicopter_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Helicopter_PlayerActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IHelicopter_PlayerActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IHelicopter_PlayerActions instance)
        {
            if (m_Wrapper.m_Helicopter_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHelicopter_PlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_Helicopter_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Helicopter_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Helicopter_PlayerActions @Helicopter_Player => new Helicopter_PlayerActions(this);

    // Car_Player
    private readonly InputActionMap m_Car_Player;
    private List<ICar_PlayerActions> m_Car_PlayerActionsCallbackInterfaces = new List<ICar_PlayerActions>();
    private readonly InputAction m_Car_Player_Forward;
    private readonly InputAction m_Car_Player_Backward;
    private readonly InputAction m_Car_Player_Right;
    private readonly InputAction m_Car_Player_Left;
    private readonly InputAction m_Car_Player_Frontback;
    private readonly InputAction m_Car_Player_LeftRight;
    private readonly InputAction m_Car_Player_Handbrake;
    private readonly InputAction m_Car_Player_Look;
    private readonly InputAction m_Car_Player_Interact;
    private readonly InputAction m_Car_Player_FullThrottle;
    public struct Car_PlayerActions
    {
        private @InputSystem_Actions m_Wrapper;
        public Car_PlayerActions(@InputSystem_Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Forward => m_Wrapper.m_Car_Player_Forward;
        public InputAction @Backward => m_Wrapper.m_Car_Player_Backward;
        public InputAction @Right => m_Wrapper.m_Car_Player_Right;
        public InputAction @Left => m_Wrapper.m_Car_Player_Left;
        public InputAction @Frontback => m_Wrapper.m_Car_Player_Frontback;
        public InputAction @LeftRight => m_Wrapper.m_Car_Player_LeftRight;
        public InputAction @Handbrake => m_Wrapper.m_Car_Player_Handbrake;
        public InputAction @Look => m_Wrapper.m_Car_Player_Look;
        public InputAction @Interact => m_Wrapper.m_Car_Player_Interact;
        public InputAction @FullThrottle => m_Wrapper.m_Car_Player_FullThrottle;
        public InputActionMap Get() { return m_Wrapper.m_Car_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Car_PlayerActions set) { return set.Get(); }
        public void AddCallbacks(ICar_PlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_Car_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Car_PlayerActionsCallbackInterfaces.Add(instance);
            @Forward.started += instance.OnForward;
            @Forward.performed += instance.OnForward;
            @Forward.canceled += instance.OnForward;
            @Backward.started += instance.OnBackward;
            @Backward.performed += instance.OnBackward;
            @Backward.canceled += instance.OnBackward;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Frontback.started += instance.OnFrontback;
            @Frontback.performed += instance.OnFrontback;
            @Frontback.canceled += instance.OnFrontback;
            @LeftRight.started += instance.OnLeftRight;
            @LeftRight.performed += instance.OnLeftRight;
            @LeftRight.canceled += instance.OnLeftRight;
            @Handbrake.started += instance.OnHandbrake;
            @Handbrake.performed += instance.OnHandbrake;
            @Handbrake.canceled += instance.OnHandbrake;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @FullThrottle.started += instance.OnFullThrottle;
            @FullThrottle.performed += instance.OnFullThrottle;
            @FullThrottle.canceled += instance.OnFullThrottle;
        }

        private void UnregisterCallbacks(ICar_PlayerActions instance)
        {
            @Forward.started -= instance.OnForward;
            @Forward.performed -= instance.OnForward;
            @Forward.canceled -= instance.OnForward;
            @Backward.started -= instance.OnBackward;
            @Backward.performed -= instance.OnBackward;
            @Backward.canceled -= instance.OnBackward;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Frontback.started -= instance.OnFrontback;
            @Frontback.performed -= instance.OnFrontback;
            @Frontback.canceled -= instance.OnFrontback;
            @LeftRight.started -= instance.OnLeftRight;
            @LeftRight.performed -= instance.OnLeftRight;
            @LeftRight.canceled -= instance.OnLeftRight;
            @Handbrake.started -= instance.OnHandbrake;
            @Handbrake.performed -= instance.OnHandbrake;
            @Handbrake.canceled -= instance.OnHandbrake;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @FullThrottle.started -= instance.OnFullThrottle;
            @FullThrottle.performed -= instance.OnFullThrottle;
            @FullThrottle.canceled -= instance.OnFullThrottle;
        }

        public void RemoveCallbacks(ICar_PlayerActions instance)
        {
            if (m_Wrapper.m_Car_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICar_PlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_Car_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Car_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Car_PlayerActions @Car_Player => new Car_PlayerActions(this);

    // TopDown_Player
    private readonly InputActionMap m_TopDown_Player;
    private List<ITopDown_PlayerActions> m_TopDown_PlayerActionsCallbackInterfaces = new List<ITopDown_PlayerActions>();
    private readonly InputAction m_TopDown_Player_Up;
    private readonly InputAction m_TopDown_Player_Down;
    private readonly InputAction m_TopDown_Player_Right;
    private readonly InputAction m_TopDown_Player_Left;
    private readonly InputAction m_TopDown_Player_FrontBack;
    private readonly InputAction m_TopDown_Player_LeftRight;
    private readonly InputAction m_TopDown_Player_Look;
    private readonly InputAction m_TopDown_Player_Interact;
    private readonly InputAction m_TopDown_Player_MouseDrag;
    private readonly InputAction m_TopDown_Player_Move;
    public struct TopDown_PlayerActions
    {
        private @InputSystem_Actions m_Wrapper;
        public TopDown_PlayerActions(@InputSystem_Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_TopDown_Player_Up;
        public InputAction @Down => m_Wrapper.m_TopDown_Player_Down;
        public InputAction @Right => m_Wrapper.m_TopDown_Player_Right;
        public InputAction @Left => m_Wrapper.m_TopDown_Player_Left;
        public InputAction @FrontBack => m_Wrapper.m_TopDown_Player_FrontBack;
        public InputAction @LeftRight => m_Wrapper.m_TopDown_Player_LeftRight;
        public InputAction @Look => m_Wrapper.m_TopDown_Player_Look;
        public InputAction @Interact => m_Wrapper.m_TopDown_Player_Interact;
        public InputAction @MouseDrag => m_Wrapper.m_TopDown_Player_MouseDrag;
        public InputAction @Move => m_Wrapper.m_TopDown_Player_Move;
        public InputActionMap Get() { return m_Wrapper.m_TopDown_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TopDown_PlayerActions set) { return set.Get(); }
        public void AddCallbacks(ITopDown_PlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_TopDown_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TopDown_PlayerActionsCallbackInterfaces.Add(instance);
            @Up.started += instance.OnUp;
            @Up.performed += instance.OnUp;
            @Up.canceled += instance.OnUp;
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @FrontBack.started += instance.OnFrontBack;
            @FrontBack.performed += instance.OnFrontBack;
            @FrontBack.canceled += instance.OnFrontBack;
            @LeftRight.started += instance.OnLeftRight;
            @LeftRight.performed += instance.OnLeftRight;
            @LeftRight.canceled += instance.OnLeftRight;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @MouseDrag.started += instance.OnMouseDrag;
            @MouseDrag.performed += instance.OnMouseDrag;
            @MouseDrag.canceled += instance.OnMouseDrag;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(ITopDown_PlayerActions instance)
        {
            @Up.started -= instance.OnUp;
            @Up.performed -= instance.OnUp;
            @Up.canceled -= instance.OnUp;
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @FrontBack.started -= instance.OnFrontBack;
            @FrontBack.performed -= instance.OnFrontBack;
            @FrontBack.canceled -= instance.OnFrontBack;
            @LeftRight.started -= instance.OnLeftRight;
            @LeftRight.performed -= instance.OnLeftRight;
            @LeftRight.canceled -= instance.OnLeftRight;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @MouseDrag.started -= instance.OnMouseDrag;
            @MouseDrag.performed -= instance.OnMouseDrag;
            @MouseDrag.canceled -= instance.OnMouseDrag;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(ITopDown_PlayerActions instance)
        {
            if (m_Wrapper.m_TopDown_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITopDown_PlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_TopDown_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TopDown_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TopDown_PlayerActions @TopDown_Player => new TopDown_PlayerActions(this);
    private int m_AzertyKeyboardSchemeIndex = -1;
    public InputControlScheme AzertyKeyboardScheme
    {
        get
        {
            if (m_AzertyKeyboardSchemeIndex == -1) m_AzertyKeyboardSchemeIndex = asset.FindControlSchemeIndex("AzertyKeyboard");
            return asset.controlSchemes[m_AzertyKeyboardSchemeIndex];
        }
    }
    private int m_QwertyKeyboardSchemeIndex = -1;
    public InputControlScheme QwertyKeyboardScheme
    {
        get
        {
            if (m_QwertyKeyboardSchemeIndex == -1) m_QwertyKeyboardSchemeIndex = asset.FindControlSchemeIndex("QwertyKeyboard");
            return asset.controlSchemes[m_QwertyKeyboardSchemeIndex];
        }
    }
    public interface IFirstPerson_PlayerActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IThirdPerson_PlayerActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IOrbit_PlayerActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnDelta(InputAction.CallbackContext context);
        void OnScrollWheel(InputAction.CallbackContext context);
        void OnLeftButton(InputAction.CallbackContext context);
        void OnRightButton(InputAction.CallbackContext context);
    }
    public interface IHelicopter_PlayerActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface ICar_PlayerActions
    {
        void OnForward(InputAction.CallbackContext context);
        void OnBackward(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnFrontback(InputAction.CallbackContext context);
        void OnLeftRight(InputAction.CallbackContext context);
        void OnHandbrake(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnFullThrottle(InputAction.CallbackContext context);
    }
    public interface ITopDown_PlayerActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnFrontBack(InputAction.CallbackContext context);
        void OnLeftRight(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnMouseDrag(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
}
