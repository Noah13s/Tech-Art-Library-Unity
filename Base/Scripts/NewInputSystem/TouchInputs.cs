//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.0
//     from Packages/com.n04h.techartlibrary/Base/Scripts/NewInputSystem/TouchInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchInputs"",
    ""maps"": [
        {
            ""name"": ""Touch"",
            ""id"": ""bc077550-ea0a-4b10-9561-fa741ff14247"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""9ad9db63-d177-4507-ac83-762d12887e8e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Delta"",
                    ""type"": ""Value"",
                    ""id"": ""8782eef9-b974-4650-992b-db0b828aace1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Count"",
                    ""type"": ""Value"",
                    ""id"": ""446ddac3-3cf3-454b-9b9c-727b36cc69ca"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Press"",
                    ""type"": ""Button"",
                    ""id"": ""488401ec-2969-45c7-8cdc-eabcb2acc5bb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchId"",
                    ""type"": ""Value"",
                    ""id"": ""14b76015-e471-4293-9f57-9e8f09c6f895"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Touches"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a870e568-8666-4c9c-851b-5ea69dc8c1f5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1f1bca06-54e9-4445-a766-e7c33cf441ca"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9a88079e-2f83-4304-86dd-2681171cbd31"",
                    ""path"": ""<Touchscreen>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1cce5fc3-8dbe-48b8-b88e-f565280029f9"",
                    ""path"": ""*/{fingerCount}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Count"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""744f881b-e3ec-4301-811b-3402edddd858"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd78da61-3550-450b-bb63-403ad7bb53f1"",
                    ""path"": ""<Touchscreen>/primaryTouch/touchId"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchId"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""235ebae3-9fd8-439a-b65e-6d24149f0eac"",
                    ""path"": ""<Pointer>/touch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touches"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Touch
        m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
        m_Touch_Position = m_Touch.FindAction("Position", throwIfNotFound: true);
        m_Touch_Delta = m_Touch.FindAction("Delta", throwIfNotFound: true);
        m_Touch_Count = m_Touch.FindAction("Count", throwIfNotFound: true);
        m_Touch_Press = m_Touch.FindAction("Press", throwIfNotFound: true);
        m_Touch_TouchId = m_Touch.FindAction("TouchId", throwIfNotFound: true);
        m_Touch_Touches = m_Touch.FindAction("Touches", throwIfNotFound: true);
    }

    ~@TouchInputs()
    {
        UnityEngine.Debug.Assert(!m_Touch.enabled, "This will cause a leak and performance issues, TouchInputs.Touch.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Touch
    private readonly InputActionMap m_Touch;
    private List<ITouchActions> m_TouchActionsCallbackInterfaces = new List<ITouchActions>();
    private readonly InputAction m_Touch_Position;
    private readonly InputAction m_Touch_Delta;
    private readonly InputAction m_Touch_Count;
    private readonly InputAction m_Touch_Press;
    private readonly InputAction m_Touch_TouchId;
    private readonly InputAction m_Touch_Touches;
    public struct TouchActions
    {
        private @TouchInputs m_Wrapper;
        public TouchActions(@TouchInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_Touch_Position;
        public InputAction @Delta => m_Wrapper.m_Touch_Delta;
        public InputAction @Count => m_Wrapper.m_Touch_Count;
        public InputAction @Press => m_Wrapper.m_Touch_Press;
        public InputAction @TouchId => m_Wrapper.m_Touch_TouchId;
        public InputAction @Touches => m_Wrapper.m_Touch_Touches;
        public InputActionMap Get() { return m_Wrapper.m_Touch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
        public void AddCallbacks(ITouchActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchActionsCallbackInterfaces.Add(instance);
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
            @Delta.started += instance.OnDelta;
            @Delta.performed += instance.OnDelta;
            @Delta.canceled += instance.OnDelta;
            @Count.started += instance.OnCount;
            @Count.performed += instance.OnCount;
            @Count.canceled += instance.OnCount;
            @Press.started += instance.OnPress;
            @Press.performed += instance.OnPress;
            @Press.canceled += instance.OnPress;
            @TouchId.started += instance.OnTouchId;
            @TouchId.performed += instance.OnTouchId;
            @TouchId.canceled += instance.OnTouchId;
            @Touches.started += instance.OnTouches;
            @Touches.performed += instance.OnTouches;
            @Touches.canceled += instance.OnTouches;
        }

        private void UnregisterCallbacks(ITouchActions instance)
        {
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
            @Delta.started -= instance.OnDelta;
            @Delta.performed -= instance.OnDelta;
            @Delta.canceled -= instance.OnDelta;
            @Count.started -= instance.OnCount;
            @Count.performed -= instance.OnCount;
            @Count.canceled -= instance.OnCount;
            @Press.started -= instance.OnPress;
            @Press.performed -= instance.OnPress;
            @Press.canceled -= instance.OnPress;
            @TouchId.started -= instance.OnTouchId;
            @TouchId.performed -= instance.OnTouchId;
            @TouchId.canceled -= instance.OnTouchId;
            @Touches.started -= instance.OnTouches;
            @Touches.performed -= instance.OnTouches;
            @Touches.canceled -= instance.OnTouches;
        }

        public void RemoveCallbacks(ITouchActions instance)
        {
            if (m_Wrapper.m_TouchActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchActions @Touch => new TouchActions(this);
    public interface ITouchActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnDelta(InputAction.CallbackContext context);
        void OnCount(InputAction.CallbackContext context);
        void OnPress(InputAction.CallbackContext context);
        void OnTouchId(InputAction.CallbackContext context);
        void OnTouches(InputAction.CallbackContext context);
    }
}
