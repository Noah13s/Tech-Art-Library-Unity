//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Packages/com.n04h.techartlibrary/Base/Scripts/NewInputSystem/ControllerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControllerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControllerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControllerInputs"",
    ""maps"": [
        {
            ""name"": ""ControllerActionMap"",
            ""id"": ""582292bb-1c2b-4e73-b48a-6b641e5831b7"",
            ""actions"": [
                {
                    ""name"": ""RightJoystick"",
                    ""type"": ""Value"",
                    ""id"": ""f6b756b7-e6d9-42b9-b8b2-0104de8fa069"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftJoystick"",
                    ""type"": ""Value"",
                    ""id"": ""91507e2b-3efd-4943-8eef-487c65bd578d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightUpButton"",
                    ""type"": ""Button"",
                    ""id"": ""c6310160-75ee-4fa2-8c48-edd99ad5a9e1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightRightButton"",
                    ""type"": ""Button"",
                    ""id"": ""0f5a4705-406d-47ee-9268-55c44393d32f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RigthLeftButton"",
                    ""type"": ""Button"",
                    ""id"": ""88c34178-07eb-47da-8ff2-66ab2eefb9a6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightDownButton"",
                    ""type"": ""Button"",
                    ""id"": ""45ffcb56-17a3-4382-ac54-394f43ac9953"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftUpButton"",
                    ""type"": ""Button"",
                    ""id"": ""a6198ac7-549e-4457-b5d6-6b58e5cb40e4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftRightButton"",
                    ""type"": ""Button"",
                    ""id"": ""100d03f9-0ca0-46e6-85db-f09b2c03593a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftLeftButton"",
                    ""type"": ""Button"",
                    ""id"": ""81c7d3bc-c0de-43c1-8973-de09aa3b5c7e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftDownButton"",
                    ""type"": ""Button"",
                    ""id"": ""122cbd43-325d-4c57-be1b-7fd179f8c50d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""R1"",
                    ""type"": ""Button"",
                    ""id"": ""ad854f0f-f79c-4941-94b9-7c817ff74388"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""R2"",
                    ""type"": ""Button"",
                    ""id"": ""5c2ba992-a038-46f3-b1aa-d1b8b08bee88"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""L1"",
                    ""type"": ""Button"",
                    ""id"": ""3e0ee503-71b7-4a80-b67a-6b0cfe4f89f3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""L2"",
                    ""type"": ""Button"",
                    ""id"": ""51b269f8-9b4a-402f-aa2d-e81e11b3a693"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""aa7bb754-3526-4bf1-877b-e966a8c9a4cb"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightJoystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2cfa51a0-f725-4624-ba78-8dd00da81d6e"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftJoystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8784c9f-6242-4fa2-9ff0-1150e86f6377"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightUpButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""064bd57f-fc9f-4658-ad28-96b71a7cb1c3"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftUpButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ace5de18-ee63-4c6a-acfb-5b644e309087"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftRightButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""baff2985-a789-4cdb-92a0-f81a8ca010d5"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftLeftButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c674fb09-59d7-4bfa-bb51-bc19e1cf347f"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftDownButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e31bf627-81ec-4ae9-babc-7ae258f6578e"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightRightButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05b9d25c-180b-4390-9600-47a50f12ec22"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RigthLeftButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1d8cb32-cc87-4a20-821a-70ee389e7ae7"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightDownButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""488ac345-a5a2-4bb5-bf8f-d6f9109589f2"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""R1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8546378-5a53-4c16-bc32-834cd0c8937a"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""R2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6903ebfd-e6f8-4c60-b07b-a49e8626a76b"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""L1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f723afd-3666-405b-a7ac-9667f36788cc"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""L2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gampad Control Scheme"",
            ""bindingGroup"": ""Gampad Control Scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // ControllerActionMap
        m_ControllerActionMap = asset.FindActionMap("ControllerActionMap", throwIfNotFound: true);
        m_ControllerActionMap_RightJoystick = m_ControllerActionMap.FindAction("RightJoystick", throwIfNotFound: true);
        m_ControllerActionMap_LeftJoystick = m_ControllerActionMap.FindAction("LeftJoystick", throwIfNotFound: true);
        m_ControllerActionMap_RightUpButton = m_ControllerActionMap.FindAction("RightUpButton", throwIfNotFound: true);
        m_ControllerActionMap_RightRightButton = m_ControllerActionMap.FindAction("RightRightButton", throwIfNotFound: true);
        m_ControllerActionMap_RigthLeftButton = m_ControllerActionMap.FindAction("RigthLeftButton", throwIfNotFound: true);
        m_ControllerActionMap_RightDownButton = m_ControllerActionMap.FindAction("RightDownButton", throwIfNotFound: true);
        m_ControllerActionMap_LeftUpButton = m_ControllerActionMap.FindAction("LeftUpButton", throwIfNotFound: true);
        m_ControllerActionMap_LeftRightButton = m_ControllerActionMap.FindAction("LeftRightButton", throwIfNotFound: true);
        m_ControllerActionMap_LeftLeftButton = m_ControllerActionMap.FindAction("LeftLeftButton", throwIfNotFound: true);
        m_ControllerActionMap_LeftDownButton = m_ControllerActionMap.FindAction("LeftDownButton", throwIfNotFound: true);
        m_ControllerActionMap_R1 = m_ControllerActionMap.FindAction("R1", throwIfNotFound: true);
        m_ControllerActionMap_R2 = m_ControllerActionMap.FindAction("R2", throwIfNotFound: true);
        m_ControllerActionMap_L1 = m_ControllerActionMap.FindAction("L1", throwIfNotFound: true);
        m_ControllerActionMap_L2 = m_ControllerActionMap.FindAction("L2", throwIfNotFound: true);
    }

    ~@ControllerInputs()
    {
        UnityEngine.Debug.Assert(!m_ControllerActionMap.enabled, "This will cause a leak and performance issues, ControllerInputs.ControllerActionMap.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ControllerActionMap
    private readonly InputActionMap m_ControllerActionMap;
    private List<IControllerActionMapActions> m_ControllerActionMapActionsCallbackInterfaces = new List<IControllerActionMapActions>();
    private readonly InputAction m_ControllerActionMap_RightJoystick;
    private readonly InputAction m_ControllerActionMap_LeftJoystick;
    private readonly InputAction m_ControllerActionMap_RightUpButton;
    private readonly InputAction m_ControllerActionMap_RightRightButton;
    private readonly InputAction m_ControllerActionMap_RigthLeftButton;
    private readonly InputAction m_ControllerActionMap_RightDownButton;
    private readonly InputAction m_ControllerActionMap_LeftUpButton;
    private readonly InputAction m_ControllerActionMap_LeftRightButton;
    private readonly InputAction m_ControllerActionMap_LeftLeftButton;
    private readonly InputAction m_ControllerActionMap_LeftDownButton;
    private readonly InputAction m_ControllerActionMap_R1;
    private readonly InputAction m_ControllerActionMap_R2;
    private readonly InputAction m_ControllerActionMap_L1;
    private readonly InputAction m_ControllerActionMap_L2;
    public struct ControllerActionMapActions
    {
        private @ControllerInputs m_Wrapper;
        public ControllerActionMapActions(@ControllerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @RightJoystick => m_Wrapper.m_ControllerActionMap_RightJoystick;
        public InputAction @LeftJoystick => m_Wrapper.m_ControllerActionMap_LeftJoystick;
        public InputAction @RightUpButton => m_Wrapper.m_ControllerActionMap_RightUpButton;
        public InputAction @RightRightButton => m_Wrapper.m_ControllerActionMap_RightRightButton;
        public InputAction @RigthLeftButton => m_Wrapper.m_ControllerActionMap_RigthLeftButton;
        public InputAction @RightDownButton => m_Wrapper.m_ControllerActionMap_RightDownButton;
        public InputAction @LeftUpButton => m_Wrapper.m_ControllerActionMap_LeftUpButton;
        public InputAction @LeftRightButton => m_Wrapper.m_ControllerActionMap_LeftRightButton;
        public InputAction @LeftLeftButton => m_Wrapper.m_ControllerActionMap_LeftLeftButton;
        public InputAction @LeftDownButton => m_Wrapper.m_ControllerActionMap_LeftDownButton;
        public InputAction @R1 => m_Wrapper.m_ControllerActionMap_R1;
        public InputAction @R2 => m_Wrapper.m_ControllerActionMap_R2;
        public InputAction @L1 => m_Wrapper.m_ControllerActionMap_L1;
        public InputAction @L2 => m_Wrapper.m_ControllerActionMap_L2;
        public InputActionMap Get() { return m_Wrapper.m_ControllerActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControllerActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IControllerActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_ControllerActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControllerActionMapActionsCallbackInterfaces.Add(instance);
            @RightJoystick.started += instance.OnRightJoystick;
            @RightJoystick.performed += instance.OnRightJoystick;
            @RightJoystick.canceled += instance.OnRightJoystick;
            @LeftJoystick.started += instance.OnLeftJoystick;
            @LeftJoystick.performed += instance.OnLeftJoystick;
            @LeftJoystick.canceled += instance.OnLeftJoystick;
            @RightUpButton.started += instance.OnRightUpButton;
            @RightUpButton.performed += instance.OnRightUpButton;
            @RightUpButton.canceled += instance.OnRightUpButton;
            @RightRightButton.started += instance.OnRightRightButton;
            @RightRightButton.performed += instance.OnRightRightButton;
            @RightRightButton.canceled += instance.OnRightRightButton;
            @RigthLeftButton.started += instance.OnRigthLeftButton;
            @RigthLeftButton.performed += instance.OnRigthLeftButton;
            @RigthLeftButton.canceled += instance.OnRigthLeftButton;
            @RightDownButton.started += instance.OnRightDownButton;
            @RightDownButton.performed += instance.OnRightDownButton;
            @RightDownButton.canceled += instance.OnRightDownButton;
            @LeftUpButton.started += instance.OnLeftUpButton;
            @LeftUpButton.performed += instance.OnLeftUpButton;
            @LeftUpButton.canceled += instance.OnLeftUpButton;
            @LeftRightButton.started += instance.OnLeftRightButton;
            @LeftRightButton.performed += instance.OnLeftRightButton;
            @LeftRightButton.canceled += instance.OnLeftRightButton;
            @LeftLeftButton.started += instance.OnLeftLeftButton;
            @LeftLeftButton.performed += instance.OnLeftLeftButton;
            @LeftLeftButton.canceled += instance.OnLeftLeftButton;
            @LeftDownButton.started += instance.OnLeftDownButton;
            @LeftDownButton.performed += instance.OnLeftDownButton;
            @LeftDownButton.canceled += instance.OnLeftDownButton;
            @R1.started += instance.OnR1;
            @R1.performed += instance.OnR1;
            @R1.canceled += instance.OnR1;
            @R2.started += instance.OnR2;
            @R2.performed += instance.OnR2;
            @R2.canceled += instance.OnR2;
            @L1.started += instance.OnL1;
            @L1.performed += instance.OnL1;
            @L1.canceled += instance.OnL1;
            @L2.started += instance.OnL2;
            @L2.performed += instance.OnL2;
            @L2.canceled += instance.OnL2;
        }

        private void UnregisterCallbacks(IControllerActionMapActions instance)
        {
            @RightJoystick.started -= instance.OnRightJoystick;
            @RightJoystick.performed -= instance.OnRightJoystick;
            @RightJoystick.canceled -= instance.OnRightJoystick;
            @LeftJoystick.started -= instance.OnLeftJoystick;
            @LeftJoystick.performed -= instance.OnLeftJoystick;
            @LeftJoystick.canceled -= instance.OnLeftJoystick;
            @RightUpButton.started -= instance.OnRightUpButton;
            @RightUpButton.performed -= instance.OnRightUpButton;
            @RightUpButton.canceled -= instance.OnRightUpButton;
            @RightRightButton.started -= instance.OnRightRightButton;
            @RightRightButton.performed -= instance.OnRightRightButton;
            @RightRightButton.canceled -= instance.OnRightRightButton;
            @RigthLeftButton.started -= instance.OnRigthLeftButton;
            @RigthLeftButton.performed -= instance.OnRigthLeftButton;
            @RigthLeftButton.canceled -= instance.OnRigthLeftButton;
            @RightDownButton.started -= instance.OnRightDownButton;
            @RightDownButton.performed -= instance.OnRightDownButton;
            @RightDownButton.canceled -= instance.OnRightDownButton;
            @LeftUpButton.started -= instance.OnLeftUpButton;
            @LeftUpButton.performed -= instance.OnLeftUpButton;
            @LeftUpButton.canceled -= instance.OnLeftUpButton;
            @LeftRightButton.started -= instance.OnLeftRightButton;
            @LeftRightButton.performed -= instance.OnLeftRightButton;
            @LeftRightButton.canceled -= instance.OnLeftRightButton;
            @LeftLeftButton.started -= instance.OnLeftLeftButton;
            @LeftLeftButton.performed -= instance.OnLeftLeftButton;
            @LeftLeftButton.canceled -= instance.OnLeftLeftButton;
            @LeftDownButton.started -= instance.OnLeftDownButton;
            @LeftDownButton.performed -= instance.OnLeftDownButton;
            @LeftDownButton.canceled -= instance.OnLeftDownButton;
            @R1.started -= instance.OnR1;
            @R1.performed -= instance.OnR1;
            @R1.canceled -= instance.OnR1;
            @R2.started -= instance.OnR2;
            @R2.performed -= instance.OnR2;
            @R2.canceled -= instance.OnR2;
            @L1.started -= instance.OnL1;
            @L1.performed -= instance.OnL1;
            @L1.canceled -= instance.OnL1;
            @L2.started -= instance.OnL2;
            @L2.performed -= instance.OnL2;
            @L2.canceled -= instance.OnL2;
        }

        public void RemoveCallbacks(IControllerActionMapActions instance)
        {
            if (m_Wrapper.m_ControllerActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControllerActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_ControllerActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControllerActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControllerActionMapActions @ControllerActionMap => new ControllerActionMapActions(this);
    private int m_GampadControlSchemeSchemeIndex = -1;
    public InputControlScheme GampadControlSchemeScheme
    {
        get
        {
            if (m_GampadControlSchemeSchemeIndex == -1) m_GampadControlSchemeSchemeIndex = asset.FindControlSchemeIndex("Gampad Control Scheme");
            return asset.controlSchemes[m_GampadControlSchemeSchemeIndex];
        }
    }
    public interface IControllerActionMapActions
    {
        void OnRightJoystick(InputAction.CallbackContext context);
        void OnLeftJoystick(InputAction.CallbackContext context);
        void OnRightUpButton(InputAction.CallbackContext context);
        void OnRightRightButton(InputAction.CallbackContext context);
        void OnRigthLeftButton(InputAction.CallbackContext context);
        void OnRightDownButton(InputAction.CallbackContext context);
        void OnLeftUpButton(InputAction.CallbackContext context);
        void OnLeftRightButton(InputAction.CallbackContext context);
        void OnLeftLeftButton(InputAction.CallbackContext context);
        void OnLeftDownButton(InputAction.CallbackContext context);
        void OnR1(InputAction.CallbackContext context);
        void OnR2(InputAction.CallbackContext context);
        void OnL1(InputAction.CallbackContext context);
        void OnL2(InputAction.CallbackContext context);
    }
}
